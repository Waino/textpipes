- side inputs and outputs
    - files need to be opened, requires handing down conf, cli_args
        % don't want to do this in init: only when make is called
        F hand it down in __call__ / single_cell ?
            - single_cell has do do bookkeeping to only open it once
        F pre/post-make call ?
            - a lot of boilerplate
        F only in __call__, with handling in SingleCellComponent or PipeComponent ?
        % in Pipe
            % don't want to tie Component to Pipe
            % pass in a dict RF -> fobj into __call__
            % still need an (empty if not needed) pre/post-make call for saving models
% what if there is no main_output to drive the generator?
    % e.g. if you just want to train a truecaser from a corpus file, and don't need the lines for anything else
    % third type of Pipe? DeadEndPipe
    - make a TrainTruecaserRule that uses DeadEndPipe, for convenience?

- slurm params from platform conf
- local platform

- tokenizer and truecaser have some rough edges

- Concatenate(Rule)
- multiple inputs when e.g. training truecaser (no need to concatenate first)
- MonoPipe subclass that reads multiple inputs concatenated?

- loop Rule that produces numbered outputs
    % early saves should be available to evaluate before run has finished
        - need to separate two types of file
            - atomic: e.g. model pickles
                - if the file exists, it can be assumed to be done
            - non-atomic: pipeline output, built up over time
                - file is not done while the job making it is still running
    % do we need a special RecipeFile with section:key:loop ?
        % pro
            - recipe DAG traversal is on RF level, cannot differentiate by cli_args
            - abuse of cli_args might cause bugs in future
        - neutral
            - sec_key given to platform.schedule, which uses it for --make (but cli_args also included there)
        - con
            - would need an extra class
            - would need non-encapsulated special handling (e.g. recipe._rf)
    - continuing from last
        - helper to find highest numbered file
    - only show one line in human-friendly output

- tooling for parameter grid search
    - conf has current best params
    - a grid search recipe has the ranges of possible values
    - helper combines the two into a subgrid
        - previously tried values will be done already, so no special handling needed

- cli usability issues
    - dryrun output is in random order
    - default monitoring picks asciibetically first output

- cli_args
- use package resources instead of data in source tree

